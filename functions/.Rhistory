][,.N]
# count breaks of serve
matchdata <- play.match(3,"P1",0.8,0.8)[[2]]
# count number of games that went to deuce at least once
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# count breaks of serve
matchdata <- play.match(3,"P1",0.8,0.8)[[2]]
# count number of games that went to deuce at least once
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# count breaks of serve
matchdata <- play.match(3,"P1",0.8,0.8)[[2]]
# count number of games that went to deuce at least once
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# count breaks of serve
matchdata <- play.match(3,"P1",0.8,0.8)[[2]]
# count number of games that went to deuce at least once
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# count breaks of serve
matchdata <- play.match(3,"P1",0.8,0.8)[[2]]
# count number of games that went to deuce at least once
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# count breaks of serve
matchdata <- play.match(3,"P1",0.8,0.8)[[2]]
# count number of games that went to deuce at least once
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# count breaks of serve
matchdata <- play.match(3,"P1",0.8,0.8)[[2]]
# count number of games that went to deuce at least once
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# count breaks of serve
matchdata <- play.match(3,"P1",0.8,0.8)[[2]]
# count number of games that went to deuce at least once
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# count breaks of serve
matchdata <- play.match(3,"P1",0.8,0.8)[[2]]
# count number of games that went to deuce at least once
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# count breaks of serve
matchdata <- play.match(3,"P1",0.8,0.8)[[2]]
# count number of games that went to deuce at least once
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# same thing for a game of two mediocre servers
matchdata <- play.match(3,"P1",0.5,0.5)[[2]]
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# same thing for a game of two mediocre servers
matchdata <- play.match(3,"P1",0.5,0.5)[[2]]
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# same thing for a game of two mediocre servers
matchdata <- play.match(3,"P1",0.5,0.5)[[2]]
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
# same thing for a game of two mediocre servers
matchdata <- play.match(3,"P1",0.5,0.5)[[2]]
setDT(matchdata)[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
deuces <- sapply(1:100, function(x) {
result <- play.match(3,"P1",0.8,0.8)[[2]]
setDT(result)
return(
result[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
) }
)
deuces <- sapply(1:1000, function(x) {
result <- play.match(3,"P1",0.8,0.8)[[2]]
setDT(result)
return(
result[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
) }
)
mean(deuces)
deuces <- sapply(1:1000, function(x) {
result <- play.match(3,"P1",0.5,0.5)[[2]]
setDT(result)
return(
result[,`:=`(
p1.points = cumsum(winner == 'P1'),
p2.points = cumsum(winner == 'P2')),
by = .(set_number,game_number)
][p1.points == 3 & p2.points == 3,.N, by = .(set_number,game_number)
][,.N]
) }
)
mean(deuces)
rm(list=ls())
library(ggplot2)
library(data.table)
library(scales)
setwd('/Users/williammunn/Documents/Github/tennis/functions/')
source("load_data.R")
# data for actual matches, convert to player-centric
rm(player.data,seedings.data,tourney.data,dir)
stats <- Data[,.(tourney_name,tourney_date,winner_name,loser_name,score,w_svpt,w_1stWon,w_2ndWon,l_svpt,l_1stWon,l_2ndWon)
][,`:=`(
w_sv = (w_1stWon + w_2ndWon)/w_svpt,
l_sv = (l_1stWon + l_2ndWon)/l_svpt)
][,`:=`(
w_rt = 1 - l_sv,
l_rt = 1 - w_sv)
][,`:=`(
w_diff = w_sv - w_rt,
l_diff = l_sv - l_rt)
][,.(tourney_name,tourney_date,winner_name,loser_name,score,w_sv,w_rt,w_diff,l_sv,l_rt,l_diff)]
stats <- stats[!(substr(score,nchar(score)-2,nchar(score))  %in% c('RET','W/O')),]
stats <- na.omit(stats)
isner <- stats[(winner_name == 'John Isner' | loser_name == 'John Isner') & year(tourney_date) == 2021]
View(isner)
# john isner's % of points won on serve in 2021
isner <- stats[(winner_name == 'John Isner' | loser_name == 'John Isner') & year(tourney_date) >= 2015,
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)]
# john isner's % of points won on serve in 2021
isner <- stats[(winner_name == 'John Isner' | loser_name == 'John Isner') & year(tourney_date) >= 2015,
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,mean(sv)]
# john isner's % of points won on serve in 2021
isner <- stats[(winner_name == 'John Isner' | loser_name == 'John Isner') & year(tourney_date) >= 2000,
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,mean(sv)]
isner <- stats[(winner_name == 'John Isner' | loser_name == 'John Isner') & year(tourney_date) == 2021,
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,mean(sv)]
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,mean_sv = mean(sv), by = year(tourney_date)]
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,mean(sv), by = year(tourney_date)]
# john isner's % of points won on serve in 2021
stats[(winner_name == 'Reilly Opelka' | loser_name == 'Reilly Opelka'),
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,mean(sv), by = year(tourney_date)]
# john isner's % of points won on serve in 2021
stats[(winner_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,mean(sv), by = year(tourney_date)]
# john isner's % of points won on serve in 2021
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,mean(sv), by = year(tourney_date)]
# john isner's % of points won on serve in 2021
stats[(winner_name == 'Nick Kyrgios' | loser_name == 'Nick Kyrgios'),
][,sv := ifelse(winner_name == 'Nick Kyrgios',w_sv,l_sv)][,mean(sv), by = year(tourney_date)]
# john isner's % of points won on serve in 2021
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,mean(sv), by = year(tourney_date)]
# john isner's % of points won on serve in 2021
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,.(mean(sv),.N), by = year(tourney_date)]
winners <- sapply(1:ntimes,function(x) {play.game("P1",0.75)[[1]]})
sum(winners=="P1")/length(winners)
winners <- sapply(1:1000,function(x) {play.game("P1",0.75)[[1]]})
sum(winners=="P1")/length(winners)
source('/Users/williammunn/Documents/Github/tennis/functions/simulate_match.R')
outcomes <- sapply(1:1000, function(x) play.point("P1",0.8))
win_percent <- sum(outcomes == "P1")/length(outcomes)
percent(win_percent)
outcomes <- sapply(1:1000, function(x) play.game("P1",0.75))
win_percent <- sum(outcomes == "P1")/length(outcomes)
outcomes <- sapply(1:1000, function(x) play.game("P1",0.75))
win_percent <- sum(outcomes == "P1")/length(outcomes)
sum(outcomes == "P1")/length(outcomes)
outcomes <- sapply(1:1000, function(x) play.game("P1",0.75))
sum(outcomes == "P1")/length(outcomes)
outcomes <- sapply(1:1000, function(x) play.game("P1",1))
sum(outcomes == "P1")/length(outcomes)
outcomes <- sapply(1:1000, function(x) play.game("P1",0.75)[[1]])
sum(outcomes == "P1")/length(outcomes)
outcomes <- sapply(1:1000, function(x) play.game("P1",0.75)[[1]])
sum(outcomes == "P1")/length(outcomes)
View(stats)
View(Data)
source("load_data.R")
# data for actual matches, convert to player-centric
rm(player.data,seedings.data,tourney.data,dir)
stats <- Data[,.(tourney_name,tourney_date,winner_name,loser_name,score,w_SvGms,w_bpSaved,w_bpFaced,w_svpt,w_1stWon,w_2ndWon,l_svpt,l_1stWon,l_2ndWon)
][,`:=`(
w_sv = (w_1stWon + w_2ndWon)/w_svpt,
l_sv = (l_1stWon + l_2ndWon)/l_svpt)
][,`:=`(
w_rt = 1 - l_sv,
l_rt = 1 - w_sv)
][,`:=`(
w_diff = w_sv - w_rt,
l_diff = l_sv - l_rt)
][,.(tourney_name,tourney_date,winner_name,loser_name,score,w_sv,w_rt,w_diff,l_sv,l_rt,l_diff)]
View(stats)
rm(player.data,seedings.data,tourney.data,dir)
stats <- Data[,.(tourney_name,tourney_date,winner_name,loser_name,score,w_SvGms,w_bpSaved,w_bpFaced,w_svpt,w_1stWon,w_2ndWon,l_svpt,l_1stWon,l_2ndWon)
][,`:=`(
w_sv = (w_1stWon + w_2ndWon)/w_svpt,
l_sv = (l_1stWon + l_2ndWon)/l_svpt)
][,`:=`(
w_rt = 1 - l_sv,
l_rt = 1 - w_sv)
][,`:=`(
w_diff = w_sv - w_rt,
l_diff = l_sv - l_rt)
][,.(tourney_name,tourney_date,winner_name,loser_name,score,w_SvGms,w_bpSaved,w_bpFaced,w_sv,w_rt,w_diff,l_sv,l_rt,l_diff)]
# remove matches that ended in retirement or were walkovers, and matches without stats
stats <- stats[!(substr(score,nchar(score)-2,nchar(score))  %in% c('RET','W/O')),]
stats <- na.omit(stats)
source("load_data.R")
# data for actual matches, convert to player-centric
rm(player.data,seedings.data,tourney.data,dir)
stats <- Data[,.(tourney_name,tourney_date,winner_name,loser_name,score,w_SvGms,w_bpSaved,w_bpFaced,w_svpt,w_1stWon,w_2ndWon,l_svpt,l_1stWon,l_2ndWon)
][,`:=`(
w_sv = (w_1stWon + w_2ndWon)/w_svpt,
l_sv = (l_1stWon + l_2ndWon)/l_svpt)
][,`:=`(
w_rt = 1 - l_sv,
l_rt = 1 - w_sv)
][,`:=`(
w_diff = w_sv - w_rt,
l_diff = l_sv - l_rt)
][,.(tourney_name,tourney_date,winner_name,loser_name,score,w_SvGms,w_bpSaved,w_bpFaced,w_sv,w_rt,w_diff,l_sv,l_rt,l_diff)]
# remove matches that ended in retirement or were walkovers, and matches without stats
stats <- stats[!(substr(score,nchar(score)-2,nchar(score))  %in% c('RET','W/O')),]
stats <- na.omit(stats)
View(stats)
source("load_data.R")
# data for actual matches, convert to player-centric
rm(player.data,seedings.data,tourney.data,dir)
stats <- Data[,.(tourney_name,tourney_date,winner_name,loser_name,score,w_SvGms,w_bpSaved,w_bpFaced,l_SvGms,l_bpSaved,l_bpFaced,w_svpt,w_1stWon,w_2ndWon,l_svpt,l_1stWon,l_2ndWon)
][,`:=`(
w_sv = (w_1stWon + w_2ndWon)/w_svpt,
l_sv = (l_1stWon + l_2ndWon)/l_svpt)
][,`:=`(
w_rt = 1 - l_sv,
l_rt = 1 - w_sv)
][,`:=`(
w_diff = w_sv - w_rt,
l_diff = l_sv - l_rt)
][,.(tourney_name,tourney_date,winner_name,loser_name,score,w_SvGms,w_bpSaved,w_bpFaced,l_SvGms,l_bpSaved,l_bpFaced,w_sv,w_rt,w_diff,l_sv,l_rt,l_diff)]
View(stats)
stats <- stats[!(substr(score,nchar(score)-2,nchar(score))  %in% c('RET','W/O')),]
stats <- na.omit(stats)
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,`:=`(
w_svgms_won = w_SvGms - w_bpFaced + w_bpSaved,
l_svgms_won = l_SvGms - l_bpFaced + l_bpSaved)
][, `:=`(
svgames_won = ifelse(winner_name == 'John Isner',w_svgames_won,l_svgames_won),
svgames = ifelse(winner_name == 'John Isner', w_svgames, l_svgames))
][,.N, by = .(svgames,svgames_won)]
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,`:=`(
w_svgames_won = w_SvGms - w_bpFaced + w_bpSaved,
l_svgames_won = l_SvGms - l_bpFaced + l_bpSaved)
][, `:=`(
svgames_won = ifelse(winner_name == 'John Isner',w_svgames_won,l_svgames_won),
svgames = ifelse(winner_name == 'John Isner', w_svgames, l_svgames))
][,.N, by = .(svgames,svgames_won)]
View(stats)
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,`:=`(
w_svgames_won = w_SvGms - w_bpFaced + w_bpSaved,
l_svgames_won = l_SvGms - l_bpFaced + l_bpSaved)
]
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,`:=`(
w_svgames_won = w_SvGms - w_bpFaced + w_bpSaved,
l_svgames_won = l_SvGms - l_bpFaced + l_bpSaved)
][, `:=`(
svgames_won = ifelse(winner_name == 'John Isner',w_svgames_won,l_svgames_won),
svgames = ifelse(winner_name == 'John Isner', w_SvGms, l_SvGms))
][,.N, by = .(svgames,svgames_won)]
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,`:=`(
w_svgames_won = w_SvGms - w_bpFaced + w_bpSaved,
l_svgames_won = l_SvGms - l_bpFaced + l_bpSaved)
][, `:=`(
svgames_won = ifelse(winner_name == 'John Isner',w_svgames_won,l_svgames_won),
svgames = ifelse(winner_name == 'John Isner', w_SvGms, l_SvGms))
][,lapply(.SD,sum),.SDcols=c("svgames","svgames_won")]
stats[(winner_name == 'John Isner' | loser_name == 'John Isner') & year(tourney_date) == 2022,
][,`:=`(
w_svgames_won = w_SvGms - w_bpFaced + w_bpSaved,
l_svgames_won = l_SvGms - l_bpFaced + l_bpSaved)
][, `:=`(
svgames_won = ifelse(winner_name == 'John Isner',w_svgames_won,l_svgames_won),
svgames = ifelse(winner_name == 'John Isner', w_SvGms, l_SvGms))
][,lapply(.SD,sum),.SDcols=c("svgames","svgames_won")]
percent(149/156)
149/156
# simulated probability of holding serve
serve_pct <- rep(c(0.1,0.25,0.5,0.75,0.9),100)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(pct = serve_pct, winner = outcomes)[,.(win_pct = sum("P1")/.N),by=pct]
data.table(pct = serve_pct, winner = outcomes)[,.(win_pct = sum(winner=="P1")/.N),by=pct]
serve_pct <- rep(c(0.1,0.25,0.5,0.75,0.9),1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(pct = serve_pct, winner = outcomes)[,.(win_pct = sum(winner=="P1")/.N),by=pct]
serve_pct <- rep(c(0.1,0.25,0.5,0.75,0.9),1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(points_pct = serve_pct, winner = outcomes)[,.(games_pct = sum(winner=="P1")/.N),by=pct]
serve_pct <- rep(c(0.1,0.25,0.5,0.75,0.9),1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(points_pct = serve_pct, winner = outcomes)[,.(games_pct = sum(winner=="P1")/.N),by=points_pct]
serve_pct <- rep(0.65,1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(points_pct = serve_pct, winner = outcomes)[,.(games_pct = sum(winner=="P1")/.N),by=points_pct]
serve_pct <- rep(0.7,1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(points_pct = serve_pct, winner = outcomes)[,.(games_pct = sum(winner=="P1")/.N),by=points_pct]
# john isner's % of points won on return in 2021
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_rt,l_rt)][,.(mean(sv),.N), by = year(tourney_date)]
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,.(mean(sv),.N), by = year(tourney_date)]
# john isner's % of points won on return in 2021
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_rt,l_rt)][,.(mean(sv),.N), by = year(tourney_date)]
# john isner's % of points won on serve in 2021
stats[(winner_name == 'Roger Federer' | loser_name == 'Roger Federer'),
][,sv := ifelse(winner_name == 'Roger Federer',w_sv,l_sv)][,.(mean(sv),.N), by = year(tourney_date)]
# john isner's % of points won on return in 2021
stats[(winner_name == 'Roger Federer' | loser_name == 'Roger Federer'),
][,sv := ifelse(winner_name == 'Roger Federer',w_rt,l_rt)][,.(mean(sv),.N), by = year(tourney_date)]
winners <- sapply(1:1000,function(x) {play.match(3,"P1",0.75,0.25)[[1]]})
sum(winners=="P1")/length(winners)
winners <- sapply(1:1000,function(x) {play.match(3,"P1",0.75,0.75)[[1]]})
sum(winners=="P1")/length(winners)
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_sv,l_sv)][,.(mean(sv),.N), by = year(tourney_date)]
# john isner's % of points won on return in 2021
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_rt,l_rt)][,.(mean(sv),.N), by = year(tourney_date)]
stats[(winner_name == 'John Isner' | loser_name == 'John Isner') & year(tourney_date) == 2019,
][,`:=`(
w_svgames_won = w_SvGms - w_bpFaced + w_bpSaved,
l_svgames_won = l_SvGms - l_bpFaced + l_bpSaved)
][, `:=`(
svgames_won = ifelse(winner_name == 'John Isner',w_svgames_won,l_svgames_won),
svgames = ifelse(winner_name == 'John Isner', w_SvGms, l_SvGms))
][,lapply(.SD,sum),.SDcols=c("svgames","svgames_won")]
586/623
stats[(winner_name == 'John Isner' | loser_name == 'John Isner'),
][,sv := ifelse(winner_name == 'John Isner',w_rt,l_rt)][,.(mean(sv),.N), by = year(tourney_date)]
serve_pct <- rep(0.7,1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(points_pct = serve_pct, winner = outcomes)[,.(games_pct = sum(winner=="P1")/.N),by=points_pct]
1/0.9
1/(1-0.891)
serve_pct <- rep(0.65,1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(points_pct = serve_pct, winner = outcomes)[,.(games_pct = sum(winner=="P1")/.N),by=points_pct]
1/(1-0.842)
serve_pct <- rep(0.75,1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(points_pct = serve_pct, winner = outcomes)[,.(games_pct = sum(winner=="P1")/.N),by=points_pct]
1/0.944
1/(1-0.944)
serve_pct <- rep(0.70,1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(points_pct = serve_pct, winner = outcomes)[,.(games_pct = sum(winner=="P1")/.N),by=points_pct]
serve_pct <- rep(0.70,1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(points_pct = serve_pct, winner = outcomes)[,.(games_pct = sum(winner=="P1")/.N),by=points_pct]
serve_pct <- rep(0.65,1000)
outcomes <- sapply(serve_pct,function(x) play.game("P1",x)[[1]])
data.table(points_pct = serve_pct, winner = outcomes)[,.(games_pct = sum(winner=="P1")/.N),by=points_pct]
0.94 - 0.885
winners <- sapply(1:1000,function(x) {play.match(3,"P1",0.75,0.7)[[1]]})
sum(winners=="P1")/length(winners)
winners <- sapply(1:1000,function(x) {play.match(3,"P1",0.75,0.7)[[1]]})
sum(winners=="P1")/length(winners)
winners <- sapply(1:1000,function(x) {play.match(5,"P1",0.75,0.7)[[1]]})
sum(winners=="P1")/length(winners)
winners <- sapply(1:1000,function(x) {play.match(5,"P1",0.75,0.7)[[1]]})
sum(winners=="P1")/length(winners)
View(stats)
stats[winner_name == 'John Isner' | loser_name == 'John Isner',won := ifelse(winner_name == 'John Isner',1,0)
][year(tourney_date) == 2019,sum(won)/.N, by = bestof]
# data for actual matches, convert to player-centric
rm(player.data,seedings.data,tourney.data,dir)
stats <- Data[,.(tourney_name,tourney_date,best_of,winner_name,loser_name,score,w_SvGms,w_bpSaved,w_bpFaced,l_SvGms,l_bpSaved,l_bpFaced,w_svpt,w_1stWon,w_2ndWon,l_svpt,l_1stWon,l_2ndWon)
][,`:=`(
w_sv = (w_1stWon + w_2ndWon)/w_svpt,
l_sv = (l_1stWon + l_2ndWon)/l_svpt)
][,`:=`(
w_rt = 1 - l_sv,
l_rt = 1 - w_sv)
][,`:=`(
w_diff = w_sv - w_rt,
l_diff = l_sv - l_rt)
][,.(tourney_name,tourney_date,best_of,winner_name,loser_name,score,w_SvGms,w_bpSaved,w_bpFaced,l_SvGms,l_bpSaved,l_bpFaced,w_sv,w_rt,w_diff,l_sv,l_rt,l_diff)]
# remove matches that ended in retirement or were walkovers, and matches without stats
stats <- stats[!(substr(score,nchar(score)-2,nchar(score))  %in% c('RET','W/O')),]
stats <- na.omit(stats)
stats[winner_name == 'John Isner' | loser_name == 'John Isner',won := ifelse(winner_name == 'John Isner',1,0)
][year(tourney_date) == 2019,sum(won)/.N, by = best_of]
stats[winner_name == 'John Isner' | loser_name == 'John Isner',won := ifelse(winner_name == 'John Isner',1,0)
]
stats[winner_name == 'John Isner' | loser_name == 'John Isner',won := ifelse(winner_name == 'John Isner',1,0)]
stats[winner_name == 'John Isner' | loser_name == 'John Isner',.(won := ifelse(winner_name == 'John Isner',1,0))]
setDF(stats)[winner_name == 'John Isner' | loser_name == 'John Isner',won := ifelse(winner_name == 'John Isner',1,0)]
setDT(stats)[winner_name == 'John Isner' | loser_name == 'John Isner',won := ifelse(winner_name == 'John Isner',1,0)]
head(stats)
View(stats)
stats[winner_name == 'John Isner' | loser_name == 'John Isner', won := ifelse(winner_name == 'John Isner',1,0)]
View(stats)
stats[winner_name == 'John Isner' | loser_name == 'John Isner', won := ifelse(winner_name == 'John Isner',1,0)
][year(tourney_date) == 2019,sum(won)/.N, by = best_of]
isner <- tats[winner_name == 'John Isner' | loser_name == 'John Isner', won := ifelse(winner_name == 'John Isner',1,0)
]
isner <- stats[winner_name == 'John Isner' | loser_name == 'John Isner', won := ifelse(winner_name == 'John Isner',1,0)
]
View(isner)
stats[(winner_name == 'John Isner' | loser_name == 'John Isner') & year(tourney_date) == 2019,
]
stats[winner_name == 'John Isner' | loser_name == 'John Isner',]
stats[winner_name == 'John Isner' | loser_name == 'John Isner', .(won = ifelse(winner_name == 'John Isner',1,0))
][year(tourney_date) == 2019,sum(won)/.N, by = best_of]
stats[winner_name == 'John Isner' | loser_name == 'John Isner', won := ifelse(winner_name == 'John Isner',1,0)
][year(tourney_date) == 2019,sum(won)/.N, by = best_of]
stats[winner_name == 'John Isner' | loser_name == 'John Isner', won := ifelse(winner_name == 'John Isner',1,0)
][year(tourney_date) == 2019,.(pct = sum(won)/.N), by = .(best_of)]
x <- stats[winner_name == 'John Isner' | loser_name == 'John Isner', won := ifelse(winner_name == 'John Isner',1,0)
]
stats[winner_name == 'John Isner' | loser_name == 'John Isner'][, won := ifelse(winner_name == 'John Isner',1,0)
][year(tourney_date) == 2019,.(pct = sum(won)/.N), by = .(best_of)]
stats[winner_name == 'John Isner' | loser_name == 'John Isner'][, won := ifelse(winner_name == 'John Isner',1,0)
][year(tourney_date) == 2019,.(.N,pct = sum(won)/.N), by = .(best_of)]
winners <- sapply(1:1000,function(x) {play.match(3,"P1",0.75,0.70)[[1]]})
sum(winners=="P1")/length(winners)
winners <- sapply(1:1000,function(x) {play.match(3,"P1",0.75,0.70)[[1]]})
sum(winners=="P1")/length(winners)
winners <- sapply(1:1000,function(x) {play.match(3,"P1",0.75,0.1)[[1]]})
sum(winners=="P1")/length(winners)
winners <- sapply(1:1000,function(x) {play.match(3,"P1",0.75,0.30)[[1]]})
sum(winners=="P1")/length(winners)
# theoretical % of matches won with 75% / 30% attributes
winners <- sapply(1:1000,function(x) {play.match(3,"P1",0.75,0.70)[[1]]})
sum(winners=="P1")/length(winners)
# adjust strategy
winners <- sapply(1:1000,function(x) {play.match(3,"P1",0.70,0.65)[[1]]})
sum(winners=="P1")/length(winners)
# theoretical % of matches won with 75% / 30% attributes
winners <- sapply(1:2000,function(x) {play.match(3,"P1",0.75,0.70)[[1]]})
sum(winners=="P1")/length(winners)
# adjust strategy
winners <- sapply(1:2000,function(x) {play.match(3,"P1",0.70,0.65)[[1]]})
sum(winners=="P1")/length(winners)
