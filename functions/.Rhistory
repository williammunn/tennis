# retrieve the winner of the game
game.winner <- game.object[[1]]
# retrieve the game.df object that shows the points played in the game just played
game.df <- game.object[[2]]
# update the most recent server variable
set.most.recent.server <- current.server
# award winner a game
if (game.winner == 'P1') {
p1.games <- p1.games + 1
} else {
p2.games <- p2.games + 1
}
# check if set is over
if((p1.games == 6 & p2.games <= 4) | (p2.games == 6 & p1.games <= 4) | p1.games == 7 | p2.games == 7) {
set.over <- TRUE
}
# update the set.df data frame
game.df['game_number'] <- p1.games + p2.games
game.df['tiebreak_ind'] <- tiebreak
set.df <- rbind(
set.df,
game.df
)
# swap server
current.server = ifelse(current.server == 'P1','P2','P1')
# check if tiebreak needed
if (p1.games == 6 & p2.games == 6) {
tiebreak <- TRUE
}
}
if(tiebreak) {
game.object <- play.tiebreak(arg.tiebreak.first.server = current.server,arg.tiebreak.p1.serve.pct = arg.set.p1.serve.pct,arg.tiebreak.p2.serve.pct = arg.set.p2.serve.pct,arg.tiebreak.inherit = inherit.game,arg.tiebreak.inherited.score = arg.set.inherited.score)
# immediately switch off the inherited switch
inherit.game <- FALSE
game.winner <- game.object[[1]]
game.df <- game.object[[2]]
set.over <- TRUE
# award winner of tiebreak a game
if (game.winner == 'P1') {
p1.games <- p1.games + 1
} else {
p2.games <- p2.games + 1
}
# update set.df data frame
game.df['game_number'] <- p1.games + p2.games
game.df['tiebreak_ind'] <- tiebreak
set.df <- rbind(
set.df,
game.df
)
}
}
if (p1.games > p2.games) {
set.winner <- 'P1'
} else {
set.winner <- 'P2'
}
return(list(set.winner,set.df,set.most.recent.server))
}
# define play.game
play.game <- function(arg.game.server,arg.game.serve.pct,arg.game.inherit = FALSE,arg.game.inherited.score = NULL) {
# initial values
p1.points <- 0
p2.points <- 0
current.server <- arg.game.server
game.over <- FALSE
# inherit
if (arg.game.inherit) {
inherited.score <- convert.score(arg.game.inherited.score)
p1.points <- inherited.score[["p1.points"]]
p2.points <- inherited.score[["p2.points"]]
}
# this function additionally outputs a data frame with a record of points and their outcomes
game.df <- data.frame(
point_number = numeric(),
server = character(),
winner = character()
)
# play points until the game is over
while(game.over == FALSE) {
# play a point
point.winner <- play.point(arg.point.server = current.server, arg.point.serve.pct = arg.game.serve.pct)
# increment points of the winner of the point just played
if (point.winner == 'P1') {
p1.points <- p1.points + 1
} else {
p2.points <- p2.points + 1
}
if (p1.points == 4 & p2.points == 4) {
p1.points <- 3
p2.points <- 3
}
# add a row to the game.df data frame
game.df <- rbind(
game.df,
data.frame(point_number = p1.points + p2.points, server = arg.game.server, winner = point.winner)
)
# check if the game is over
if ((p1.points >= 4 | p2.points >= 4) &
(abs(p1.points - p2.points) >= 2)) {
game.over <- TRUE
}
}
if (p1.points > p2.points) {
game.winner <- 'P1'
} else {
game.winner <- 'P2'
}
return(list(game.winner,game.df))
}
# define play.point
play.point <- function(arg.point.server, arg.point.serve.pct) {
# generate random number
random.number <- runif(1)
# determine winner of point
if (arg.point.serve.pct > random.number) {
if (arg.point.server == 'P1') {
return('P1')
} else if (arg.point.server == 'P2') {
return('P2')
}
} else {
if (arg.point.server == 'P1') {
return('P2')
} else if (arg.point.server == 'P2') {
return('P1')
}
}
}
play.tiebreak <- function(arg.tiebreak.first.server,arg.tiebreak.p1.serve.pct,arg.tiebreak.p2.serve.pct,arg.tiebreak.inherit=FALSE,arg.tiebreak.inherited.score=NULL) {
# initial values
tiebreak.over <- FALSE
tiebreak.current.server <- arg.tiebreak.first.server
p1.points <- 0
p2.points <- 0
tiebreak.serves.remaining <- 1 # first person to serve only serves once
# inherit
if (arg.tiebreak.inherit) {
inherited.score <- convert.score(arg.tiebreak.inherited.score)
p1.points <- inherited.score[["p1.points"]]
p2.points <- inherited.score[["p2.points"]]
tiebreak.server.points.served <- (sum(p1.points,p2.points)%%2) + 1
}
# this function additionally outputs a data frame with the outcomes of individual points
tiebreak.df <- data.frame(
point_number = numeric(),
server = character(),
winner = character()
)
# play the remainder of the tiebreak
while(tiebreak.over == FALSE) {
# play the current server's 2 points
while (tiebreak.serves.remaining > 0) {
# play the first point on this player's server
point.winner <- play.point(arg.point.server = tiebreak.current.server, arg.point.serve.pct = ifelse(tiebreak.current.server == 'P1',arg.tiebreak.p1.serve.pct,arg.tiebreak.p2.serve.pct))
# award point to the winner
if (point.winner == 'P1') {
p1.points <- p1.points + 1
} else {
p2.points <- p2.points + 1
}
# increment the points served by this current server
tiebreak.serves.remaining <- tiebreak.serves.remaining - 1
# update the tiebreak.df object
tiebreak.df <- rbind(
tiebreak.df,
data.frame(point_number = p1.points + p2.points, server = tiebreak.current.server, winner = point.winner)
)
# check if tiebreak should be ended
if ((p1.points >= 7 | p2.points >= 7) & (abs(p1.points - p2.points) > 1)) {
tiebreak.over <- TRUE
break
}
}
# after the first point players get 2 serves each
tiebreak.serves.remaining <- 2
# swap server
tiebreak.current.server <- ifelse(tiebreak.current.server == "P1","P2","P1")
}
# determine who wins the tiebreak
if (p1.points > p2.points) {
tiebreak.winner <- 'P1'
} else {
tiebreak.winner <- 'P2'
}
# return the winner of the tiebreak
return(list(tiebreak.winner,tiebreak.df))
}
# example of a match
# play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[2]]
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[2]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
# example of a match
play.match(arg.best.of = 3, arg.match.first.server = 'P1', arg.match.p1.serve.pct = 0.9, arg.match.p2.serve.pct = 0.9)[[1]]
play.point('P1',0.70)
play.point('P1',0.70)
play.point('P1',0.70)
play.point('P1',0.70)
play.point('P1',0.70)
play.point('P1',0.70)
play.point('P1',0.70)
play.point('P1',0.70)
play.tiebreak('P1',0.7,0.6)
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.7,0.6)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.9,0.9)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.99,0.99)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
play.tiebreak('P1',0.5,0.5)[[2]]
source("~/Untitled.Rmd")
# take data from 2000 > present
years <- c(2000:2023)
x <- read.csv(url("https://github.com/JeffSackmann/tennis_atp/blob/master/atp_matches_2005.csv"))
x <- read.csv(url("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/blob/master/atp_matches_2005.csv"))
x <- read_csv(url("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/blob/master/atp_matches_2005.csv"))
require(readr)
install.packages("readr")
require(readr)
x <- read_csv(url("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/blob/master/atp_matches_2005.csv"))
install.packages("RCurl")
x <- read_csv(url("https://raw.github.com/JeffSackmann/tennis_atp/blob/master/atp_matches_2005.csv"))
library(RCurl)
x <- getURL("https://raw.github.com/JeffSackmann/tennis_atp/blob/master/atp_matches_2005.csv")
y <- read.csv(text = x)
x <- getURL("https://raw.github.com/JeffSackmann/tennis_atp/blob/master/atp_matches_2005.csv")
x <- getURL("https://raw.github.com/JeffSackmann/tennis_atp/blob/master/atp_matches_2005.csv")
x <- getURL("https://github.com/JeffSackmann/tennis_atp/blob/master/atp_matches_2005.csv")
y <- read.csv(text = x)
x <- "https://raw.github.com/JeffSackmann/tennis_atp/blob/master/atp_matches_2005.csv"
y <- read.csv(x)
x <- read_csv(url(paste0("https://raw.githubusercontent.com/JeffSackmann/tennis_slam_pointbypoint/master/2021-wimbledon-points.csv")))
x <- read_csv(url(paste0("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/atp_matches_2022.csv")))
x <- read_csv(url(paste0("https://raw.githubusercontent.com/JeffSackmann/blob/master/tennis_atp/atp_matches_2022.csv")))
x <- read_csv(url(paste0("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_2022.csv")))
View(x)
require(data.table);require(lubridate);require(dplyr);require(readr)
rm(list=ls())
years <- c(2000:2023)
for (year in years) {
temp_data <- read_csv(url(paste0("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_",year)))
assign(paste0('atp_matches_',year),temp_data)
}
# take data from 2000 > present
years <- c(2000:2023)
for (year in years) {
temp_data <- read_csv(url(paste0("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_",year,".csv")))
assign(paste0('atp_matches_',year),temp_data)
}
files <- list.files(pattern="atp_matches_[^_]*.csv")
Data <- do.call("rbind", lapply(files, function(x) fread(x)))
files <- list.files(pattern="atp_matches_[^_]*")
# load match data
files <- ls(envir = .GlobalEnv,pattern="atp_matches_[^_]*")
Data <- do.call("rbind", lapply(files, function(x) fread(x)))
Data <- do.call("rbind", lapply(files, function(x) as.data.table(x)))
files
Data <- do.call("rbind", files)
Data <- do.call("rbind", list(files))
Data <- do.call("rbind", lapply(files, function(x) data.table(x)))
Data <- do.call("rbind", lapply(files, function(x) fread(x)))
Data <- do.call("rbind", lapply(files, function(x) data.table(x)))
View(Data)
Data <- do.call("rbind", lapply(get(files), function(x) data.table(x)))
Data <- do.call("rbind", lapply(files, get))
Data <- do.call("rbind", lapply(files, function(x) {as.data.table(get(x))}))
Data <- do.call("rbind", lapply(files, function(x) {as.data.table(get(x))}))
is.data.table(Data)
head(Data)
View(Data)
for (file in files) {rm(get(files))}
for (file in files) {rm(file)}
for (file in files) {rm(file)}
for (file in files) {rm(file)}
rm(files[1])
rm(files[[1]])
rm(get(files[[1]]))
rm(list = files)
# clean data
Data[,tourney_date := as.Date(as.character(tourney_date) ,format='%Y%m%d', origin = "1900/01/01")]
Data[,`:=`(winner_id = as.character(winner_id),loser_id = as.character(loser_id))]
# dictate what variables get assigned to what data
match_vars <- c('tourney_id','tourney_date','winner_id','loser_id','winner_name','loser_name','best_of','score','round','minutes')
stat_vars <- c('tourney_id','winner_id','loser_id','round','w_svpt','w_SvGms','w_1stWon','w_2ndWon','w_bpSaved','w_bpFaced','l_svpt','l_SvGms','l_1stWon','l_2ndWon','l_bpSaved','l_bpFaced')
tourney_vars <- c('tourney_id','tourney_name','tourney_date','surface','draw_size')
player_vars <- c('winner_id','winner_name','loser_id','loser_name')
# matches
match_data <- Data[!(round %in% c("BR","ER")),.SD,.SDcols = match_vars][,match_id := seq_len(.N)] ; setkey(match_data,round)
sortorderdf <- data.table(round=c("RR","R128","R64","R32","R16","QF","SF","F"),order=1:8) ; setkey(sortorderdf,round)
match_data <- sortorderdf[match_data][order(tourney_id,order)] ; rm(sortorderdf)
match_data[,match_num := seq_len(.N), by = .(tourney_id)]
setkey(match_data,match_id)
# stats per player per match
stat_data <- Data[!(round %in% c("BR","ER")),.SD,.SDcols = stat_vars][,match_id := seq_len(.N)]
setkey(stat_data,match_id)
stat_data[match_data, on = 'match_id', match_num := i.match_num]
stat_data <- rbind(
stat_data[,.(match_id,match_num,tourney_id,round,winner_id,loser_id,player_id=winner_id,svpts=w_svpt,svgms=w_SvGms,svpts_won=w_1stWon+w_2ndWon,bp_faced=w_bpFaced,bp_saved=w_bpSaved)],
stat_data[,.(match_id,match_num,tourney_id,round,winner_id,loser_id,player_id=loser_id,svpts=l_svpt,svgms=l_SvGms,svpts_won=l_1stWon+l_2ndWon,bp_faced=l_bpFaced,bp_saved=l_bpSaved)]
)[,svgms_won := svgms - (bp_faced - bp_saved)]
# tournaments
tourney_data <- Data[,.SD,.SDcols = tourney_vars]
tourney_data <- tourney_data[!duplicated(tourney_data),]
# prepare player data
player_data <- Data[,.SD,.SDcols = player_vars]
player_data2 <- rbind(
player_data[,.(winner_id,winner_name)][,.(player_id = winner_id, player_name = winner_name)],
player_data[,.(loser_id,loser_name)][,.(player_id = loser_id, player_name = loser_name)])[order(player_id)] %>% distinct()
player_data <- player_data2
# remove what we no longer need
rm(player_data2,player_vars,Data,files,match_vars,stat_vars,tourney_vars)
setwd("/Users/williammunn/Documents/Github/tennis/functions")
print('All data loaded')
View(tourney_data)
View(player_data)
View(match_data)
library(dplyr);library(lubridate);library(data.table);library(sqldf)
setwd("/Users/williammunn/Documents/Github/tennis/functions")
# load tennis data, remove what we don't need
source("load_data.R")
lapply(list(match_data,player_data),setDT)
match_data <- match_data[, .(tourney_id,tourney_date,match_num,winner_id,loser_id)]
# subset of data for matches played in 2019
elo_input_data <- match_data[year(tourney_date) %in% c(2000:2023)]
# a function that computes the elo points added/subtracted from the winner/loser following one match
elo_calculate_points <- function(arg_winner_matches,
arg_loser_matches,
arg_winner_prevelo,
arg_loser_prevelo
) {
# calculate the pre-match win probabilities of each player on the day of the match
e_winner <- 1/(1 + 10^((arg_loser_prevelo - arg_winner_prevelo)/400))
e_loser <- 1/(1 + 10^((arg_winner_prevelo - arg_loser_prevelo)/400))
# create the k factor for the winner and loser (depends on prior number of matches)
k_winner <- 250/((arg_winner_matches + 5)^0.4)
k_loser <- 250/((arg_loser_matches + 5)^0.4)
# update elo for players
elo_winner <- round(arg_winner_prevelo + k_winner*(1 - e_winner),0)
elo_loser <- round(arg_loser_prevelo + k_loser*(0 - e_loser),0)
# return new elo points of player 1 and 2 respectively
return(list(elo_winner,elo_loser))
}
# sort data by tourney_date and match_num
temp <- elo_input_data[order(tourney_date,tourney_id,match_num)]
# vectors for players and their current Elo ratings
players <- unique(c(elo_input_data[['winner_id']],elo_input_data[['loser_id']]))
elo <- rep(1500,length=length(players))
matches <- rep(0,length(players))
# go through match-by-match, updating Elos for each player
output <- apply(
temp,
MARGIN = 1,
function(x) {
# determine indices for winner and loser
winner <- which(players==x[4])
loser <- which(players==x[5])
# calculate winner and loser Elo points
points <- elo_calculate_points(
arg_winner_matches = matches[winner],
arg_loser_matches = matches[loser],
arg_winner_prevelo = elo[winner],
arg_loser_prevelo = elo[loser]
)
# update matches count
matches[winner] <<- matches[winner] + 1
matches[loser] <<- matches[loser] + 1
# update Elos
elo[winner] <<- points[[1]]
elo[loser] <<- points[[2]]
# output
return(points)
}
)
print("Elos calculated")
# extract values and put these into the data
temp2 <- temp[,`:=`(
winner_elo = unlist(output)[c(TRUE,FALSE)],
loser_elo = unlist(output)[c(FALSE,TRUE)]
)][order(tourney_date,tourney_id,match_num)]
# sadly we do not know the date of each actual match
# this means that the best we can do is do store the
# Elo ratings for each player for the final match of
# each tournament he/she played in
# so we will take this match now
# first we need to convert the data to one row per player/match
temp3 <- rbind(
copy(temp2)[,.(tourney_id,tourney_date,match_num,player_id=winner_id,elo=winner_elo)],
copy(temp2)[,.(tourney_id,tourney_date,match_num,player_id=loser_id,elo=loser_elo)]
)[order(player_id,tourney_date,match_num)]
# take last match they played for each tourney_date
final_match <- temp3[,.SD[.N],by=.(player_id,tourney_date)][,match_num := NULL][order(player_id,-tourney_date)]
final_match[,tourney_date2 := as.Date(tourney_date,"%y-%m-%d")]
View(final_match)
View(final_match)
